{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "TemplateV1beta3",
  "description": "A Template describes a scaffolding task for use with the Scaffolder. It describes the required parameters as well as a series of steps that will be taken to execute the scaffolding task.",
  "examples": [
    {
      "apiVersion": "foobar.backstage.io/v1beta3",
      "kind": "Dataset",
      "metadata": {
        "name": "react-ssr-template",
        "title": "React SSR Template",
        "description": "Next.js application skeleton for creating isomorphic web applications.",
        "tags": ["recommended", "react"]
      },
      "spec": {
        "owner": "artist-relations-team",
        "parameters": {
          "required": ["name", "description"],
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "description": "Unique name of the component"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "Description of the component"
            }
          }
        }
      }
    }
  ],
  "allOf": [
    {
      "$ref": "Entity"
    },
    {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "apiVersion": {
          "enum": ["foobar.backstage.io/v1beta3"]
        },
        "kind": {
          "enum": ["Dataset"]
        },
        "spec": {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of component created by the template. The software catalog accepts any type value, but an organization should take great care to establish a proper taxonomy for these. Tools including Backstage itself may read this field and behave differently depending on its value. For example, a website type component may present tooling in the Backstage interface that is specific to just websites.",
              "examples": ["service", "website", "library"],
              "minLength": 1
            },
            "owner": {
              "type": "string",
              "description": "The user (or group) owner of the template",
              "minLength": 1
            },
            "parameters": {
              "oneOf": [
                {
                  "type": "object",
                  "description": "The JSONSchema describing the inputs for the template."
                },
                {
                  "type": "array",
                  "description": "A list of separate forms to collect parameters.",
                  "items": {
                    "type": "object",
                    "description": "The JSONSchema describing the inputs for the template."
                  }
                }
              ]
            }
          }
        }
      }
    }
  ]
}
